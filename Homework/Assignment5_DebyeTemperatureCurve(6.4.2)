{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import relevant libraries\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.integrate as integrate\n",
    "\n",
    "#First function calculates the heat capacity for a given temperature, using the Debye specific heat formula.\n",
    "def heatCapacity(temp):\n",
    "\n",
    "    #Set the volume V of Al, the density, Debye temperature and Boltzmann's constant.\n",
    "    V = 0.001\n",
    "    density = 6.022*10**28\n",
    "    theta = 428.0\n",
    "    kB = 1.38*10**-23\n",
    "    \n",
    "    \n",
    "    #Define a lambda function: this is the integrand of the integral within the specific heat formula.\n",
    "    f = lambda x: x**4*np.exp(x)/(np.exp(x)-1)**2\n",
    "    \n",
    "    #Define a variable to hold the two quantities generated by scipy's quad integrate function.\n",
    "    #Quad generates the value of the integral as well as its error, so \"area\" is an array with two values.\n",
    "    area = integrate.quad(f, 0, theta/temp)\n",
    "    \n",
    "    #For a given temperature, calculate and store the value for the specific heat in variable \"Cv\".\n",
    "    #I only want the integral value stored in \"area,\" not its error. Thus, only the first index is needed.\n",
    "    Cv = 9.0*V*density*kB*(temp/theta)**3.0*area[0]\n",
    "    \n",
    "    #Print the heat capacity.\n",
    "    print(\"The heat capacity at temperature \", temp, \"K is: \", Cv)\n",
    "\n",
    "#Define another function to calculate a range of heat capacities for different temperatures, and plot the curve.\n",
    "def heatCapCurve(tempRange):\n",
    "    \n",
    "    #Same variable declarations as in previous function.\n",
    "    V = 0.001\n",
    "    density = 6.022*10**28\n",
    "    theta = 428.0\n",
    "    kB = 1.38*10**-23\n",
    "    \n",
    "    #Same lambda function as in previous function.\n",
    "    f = lambda x: x**4*np.exp(x)/(np.exp(x)-1)**2\n",
    "    \n",
    "    #This time, create an uninitialized array to hold different heat capacity values\n",
    "    #for different temperatures.\n",
    "    Cv = []\n",
    "    \n",
    "    #Using the same logic as in my \"heatCapacity\" function, populate the Cv array with\n",
    "    #this for loop over a specified temperature range.\n",
    "    for i in range(5, tempRange+1):\n",
    "        area = integrate.quad(f, 0, theta/i)\n",
    "        \n",
    "        Cv.append(9.0*V*density*kB*(i/theta)**3.0*area[0])\n",
    "    \n",
    "    \n",
    "    #The following code will plot the heat capacity as a function of temperature.\n",
    "    x = np.linspace(5, tempRange+1, tempRange-4)\n",
    "    y = Cv\n",
    "    plt.plot(x, y, 'b')\n",
    "    \n",
    "    plt.xlim([5,tempRange+1])\n",
    "    plt.xlabel(\"Temperature (K)\")\n",
    "    plt.ylabel(\"Cv (J/K)\")\n",
    "    plt.title(\"Heat Capacity As a Function of Temperature\")\n",
    "    \n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The heat capacity at temperature  125 K is:  1478.3063950419282\n"
     ]
    }
   ],
   "source": [
    "heatCapacity(125)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "heatCapCurve(500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
